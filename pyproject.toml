[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "non_local_detector"
description = "A python package to decode non-local activity from neural data"
readme = "README.md"
requires-python = ">=3.10"
license = { file = "LICENSE" }
keywords = ["neuroscience", "bayesian-inference", "hmm", "neural-decoding", "replay-detection"]
authors = [{ name = "Eric Denovellis", email = "eric.denovellis@ucsf.edu" }]
maintainers = [{ name = "Eric Denovellis", email = "eric.denovellis@ucsf.edu" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "numpy >=1.25",
    "scipy",
    "jax>=0.4.27",
    "pandas",
    "networkx",
    "xarray",
    "scikit-learn",
    "patsy",
    "tqdm",
    "track_linearization",
    "matplotlib",
    "seaborn",
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/LorenFrankLab/non_local_detector"
"Bug Tracker" = "https://github.com/LorenFrankLab/non_local_detector/issues"

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "ruff",
    "mypy",
    "black",
]
dev = [
    "pre-commit",
    "pytest",
    "pytest-cov",
    "ruff",
    "mypy",
    "black",
]
gpu = ["jax[cuda]"]
viz = ["sortingview"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/non_local_detector/_version.py"

[tool.hatch.build.targets.sdist]
exclude = [".git_archival.txt"]

[tool.hatch.build.targets.wheel]
packages = ["src/non_local_detector"]

# Ruff configuration
[tool.ruff]
src = ["src"]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, can tighten later
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["src/non_local_detector/tests"]
python_files = ["test_*.py"]
addopts = "-v --tb=short"
